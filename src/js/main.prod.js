(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var getLocalStorage = JSON.parse(localStorage.getItem('arrTimers')) || [];

for (var i = 0; i < getLocalStorage.length; i++) {
  getLocalStorage[i].stopTime = 'true';
}

var mainData = {
  inputTitle: "",
  arrTimers: getLocalStorage || [],
  id: localStorage.getItem('id') || 0
};

var timer = new Vue({
  el: "#timers",
  data: mainData,
  methods: {
    addTimer: function addTimer(title) {
      var objTimer = {
        'title': title || 'timer',
        'count': 0,
        'screenTime': '0 : 00 : 00',
        'stopTime': true,
        'name': 'play_arrow',
        'intervalId': '',
        'id': this.id
      };
      this.arrTimers.push(objTimer);
      this.inputTitle = '';
      this.id++;
      // console.log(timer);
      this.setLocal();
    },
    start: function start(timer) {
      var _this = this;

      timer.stopTime = !timer.stopTime;
      if (timer.stopTime) {
        this.setLocal();
        clearInterval(timer.intervalId);
      } else {
        timer.intervalId = setInterval(function () {
          timer.count++;
          var sec = timer.count % 60;
          if (sec < 10) {
            sec = '0' + sec;
          }
          var min = Math.floor(timer.count / 60);
          if (min < 10) {
            min = '0' + min;
          }
          var hour = Math.floor(timer.count / 3600);
          timer.screenTime = hour + ' : ' + min + ' : ' + sec;
          _this.setLocal();
        }, 1000);
      }
    },
    del: function del(index) {
      clearInterval(timer.intervalId);
      this.arrTimers.splice(index, 1);
      this.setLocal();
    },
    setLocal: function setLocal() {
      localStorage.setItem('arrTimers', JSON.stringify(this.arrTimers));
      localStorage.setItem('id', this.id);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfM2ZmNzZhZWQuanMiXSwibmFtZXMiOlsiZ2V0TG9jYWxTdG9yYWdlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImkiLCJsZW5ndGgiLCJzdG9wVGltZSIsIm1haW5EYXRhIiwiaW5wdXRUaXRsZSIsImFyclRpbWVycyIsImlkIiwidGltZXIiLCJWdWUiLCJlbCIsImRhdGEiLCJtZXRob2RzIiwiYWRkVGltZXIiLCJ0aXRsZSIsIm9ialRpbWVyIiwicHVzaCIsInNldExvY2FsIiwic3RhcnQiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiY291bnQiLCJzZWMiLCJtaW4iLCJNYXRoIiwiZmxvb3IiLCJob3VyIiwic2NyZWVuVGltZSIsImRlbCIsImluZGV4Iiwic3BsaWNlIiwic2V0SXRlbSIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxrQkFBa0JDLEtBQUtDLEtBQUwsQ0FBV0MsYUFBYUMsT0FBYixDQUFxQixXQUFyQixDQUFYLEtBQWlELEVBQXZFOztBQUVBLEtBQUksSUFBSUMsSUFBSSxDQUFaLEVBQWVBLElBQUlMLGdCQUFnQk0sTUFBbkMsRUFBMkNELEdBQTNDLEVBQWdEO0FBQzlDTCxrQkFBZ0JLLENBQWhCLEVBQW1CRSxRQUFuQixHQUE4QixNQUE5QjtBQUNEOztBQUVELElBQUlDLFdBQVc7QUFDYkMsY0FBWSxFQURDO0FBRWJDLGFBQVdWLG1CQUFtQixFQUZqQjtBQUdiVyxNQUFJUixhQUFhQyxPQUFiLENBQXFCLElBQXJCLEtBQThCO0FBSHJCLENBQWY7O0FBTUEsSUFBSVEsUUFBUSxJQUFJQyxHQUFKLENBQVE7QUFDbEJDLE1BQUksU0FEYztBQUVsQkMsUUFBTVAsUUFGWTtBQUdsQlEsV0FBUztBQUNQQyxZQURPLG9CQUNFQyxLQURGLEVBQ1M7QUFDZCxVQUFJQyxXQUFXO0FBQ2IsaUJBQVNELFNBQVMsT0FETDtBQUViLGlCQUFTLENBRkk7QUFHYixtQ0FIYTtBQUliLG9CQUFZLElBSkM7QUFLYixnQkFBUSxZQUxLO0FBTWIsc0JBQWMsRUFORDtBQU9iLGNBQU0sS0FBS1A7QUFQRSxPQUFmO0FBU0EsV0FBS0QsU0FBTCxDQUFlVSxJQUFmLENBQW9CRCxRQUFwQjtBQUNBLFdBQUtWLFVBQUwsR0FBa0IsRUFBbEI7QUFDQSxXQUFLRSxFQUFMO0FBQ0E7QUFDQSxXQUFLVSxRQUFMO0FBQ0QsS0FoQk07QUFpQlBDLFNBakJPLGlCQWlCRFYsS0FqQkMsRUFpQk07QUFBQTs7QUFDWEEsWUFBTUwsUUFBTixHQUFpQixDQUFDSyxNQUFNTCxRQUF4QjtBQUNBLFVBQUdLLE1BQU1MLFFBQVQsRUFBbUI7QUFDakIsYUFBS2MsUUFBTDtBQUNBRSxzQkFBY1gsTUFBTVksVUFBcEI7QUFDRCxPQUhELE1BSUs7QUFDSFosY0FBTVksVUFBTixHQUFtQkMsWUFBWSxZQUFNO0FBQ25DYixnQkFBTWMsS0FBTjtBQUNBLGNBQUlDLE1BQU1mLE1BQU1jLEtBQU4sR0FBYyxFQUF4QjtBQUNBLGNBQUdDLE1BQU0sRUFBVCxFQUFhO0FBQ1hBLGtCQUFNLE1BQU1BLEdBQVo7QUFDRDtBQUNELGNBQUlDLE1BQU1DLEtBQUtDLEtBQUwsQ0FBV2xCLE1BQU1jLEtBQU4sR0FBYyxFQUF6QixDQUFWO0FBQ0EsY0FBR0UsTUFBTSxFQUFULEVBQWE7QUFDWEEsa0JBQU0sTUFBTUEsR0FBWjtBQUNEO0FBQ0QsY0FBSUcsT0FBT0YsS0FBS0MsS0FBTCxDQUFXbEIsTUFBTWMsS0FBTixHQUFjLElBQXpCLENBQVg7QUFDQWQsZ0JBQU1vQixVQUFOLEdBQXNCRCxJQUF0QixXQUFnQ0gsR0FBaEMsV0FBeUNELEdBQXpDO0FBQ0EsZ0JBQUtOLFFBQUw7QUFDRCxTQWJrQixFQWFoQixJQWJnQixDQUFuQjtBQWNEO0FBQ0YsS0F2Q007QUF3Q1BZLE9BeENPLGVBd0NIQyxLQXhDRyxFQXdDSTtBQUNUWCxvQkFBY1gsTUFBTVksVUFBcEI7QUFDQSxXQUFLZCxTQUFMLENBQWV5QixNQUFmLENBQXNCRCxLQUF0QixFQUE2QixDQUE3QjtBQUNBLFdBQUtiLFFBQUw7QUFDRCxLQTVDTTtBQTZDUEEsWUE3Q08sc0JBNkNJO0FBQ1RsQixtQkFBYWlDLE9BQWIsQ0FBcUIsV0FBckIsRUFBbUNuQyxLQUFLb0MsU0FBTCxDQUFlLEtBQUszQixTQUFwQixDQUFuQztBQUNBUCxtQkFBYWlDLE9BQWIsQ0FBcUIsSUFBckIsRUFBNEIsS0FBS3pCLEVBQWpDO0FBQ0Q7QUFoRE07QUFIUyxDQUFSLENBQVoiLCJmaWxlIjoiZmFrZV8zZmY3NmFlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBnZXRMb2NhbFN0b3JhZ2UgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhcnJUaW1lcnMnKSkgfHwgW107XG5cbmZvcihsZXQgaSA9IDA7IGkgPCBnZXRMb2NhbFN0b3JhZ2UubGVuZ3RoOyBpKyspIHtcbiAgZ2V0TG9jYWxTdG9yYWdlW2ldLnN0b3BUaW1lID0gJ3RydWUnO1xufVxuXG5sZXQgbWFpbkRhdGEgPSB7XG4gIGlucHV0VGl0bGU6IFwiXCIsXG4gIGFyclRpbWVyczogZ2V0TG9jYWxTdG9yYWdlIHx8IFtdLFxuICBpZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lkJykgfHwgMCxcbn1cblxubGV0IHRpbWVyID0gbmV3IFZ1ZSh7XG4gIGVsOiBcIiN0aW1lcnNcIixcbiAgZGF0YTogbWFpbkRhdGEsXG4gIG1ldGhvZHM6IHtcbiAgICBhZGRUaW1lcih0aXRsZSkge1xuICAgICAgbGV0IG9ialRpbWVyID0ge1xuICAgICAgICAndGl0bGUnOiB0aXRsZSB8fCAndGltZXInLFxuICAgICAgICAnY291bnQnOiAwLFxuICAgICAgICAnc2NyZWVuVGltZSc6IGAwIDogMDAgOiAwMGAsXG4gICAgICAgICdzdG9wVGltZSc6IHRydWUsXG4gICAgICAgICduYW1lJzogJ3BsYXlfYXJyb3cnLFxuICAgICAgICAnaW50ZXJ2YWxJZCc6ICcnLFxuICAgICAgICAnaWQnOiB0aGlzLmlkLFxuICAgICAgfVxuICAgICAgdGhpcy5hcnJUaW1lcnMucHVzaChvYmpUaW1lcik7XG4gICAgICB0aGlzLmlucHV0VGl0bGUgPSAnJztcbiAgICAgIHRoaXMuaWQrKztcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRpbWVyKTtcbiAgICAgIHRoaXMuc2V0TG9jYWwoKTtcbiAgICB9LFxuICAgIHN0YXJ0KHRpbWVyKSB7XG4gICAgICB0aW1lci5zdG9wVGltZSA9ICF0aW1lci5zdG9wVGltZTtcbiAgICAgIGlmKHRpbWVyLnN0b3BUaW1lKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jYWwoKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lci5pbnRlcnZhbElkKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aW1lci5pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIHRpbWVyLmNvdW50Kys7XG4gICAgICAgICAgbGV0IHNlYyA9IHRpbWVyLmNvdW50ICUgNjA7XG4gICAgICAgICAgaWYoc2VjIDwgMTApIHtcbiAgICAgICAgICAgIHNlYyA9ICcwJyArIHNlYztcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IG1pbiA9IE1hdGguZmxvb3IodGltZXIuY291bnQgLyA2MCk7XG4gICAgICAgICAgaWYobWluIDwgMTApIHtcbiAgICAgICAgICAgIG1pbiA9ICcwJyArIG1pbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGhvdXIgPSBNYXRoLmZsb29yKHRpbWVyLmNvdW50IC8gMzYwMCk7XG4gICAgICAgICAgdGltZXIuc2NyZWVuVGltZSA9IGAke2hvdXJ9IDogJHttaW59IDogJHtzZWN9YDtcbiAgICAgICAgICB0aGlzLnNldExvY2FsKCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVsKGluZGV4KSB7XG4gICAgICBjbGVhckludGVydmFsKHRpbWVyLmludGVydmFsSWQpO1xuICAgICAgdGhpcy5hcnJUaW1lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMuc2V0TG9jYWwoKTtcbiAgICB9LFxuICAgIHNldExvY2FsKCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FyclRpbWVycycgLCBKU09OLnN0cmluZ2lmeSh0aGlzLmFyclRpbWVycykpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lkJyAsIHRoaXMuaWQpO1xuICAgIH0sXG4gIH1cbn0pXG4iXX0=
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
