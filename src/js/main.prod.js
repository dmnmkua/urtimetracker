(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var timer = new Vue({
  el: "#timers",
  data: {
    inputTitle: "",
    arrTimers: [],
    startIcon: '<i class="material-icons">play_arrow</i>',
    stopIcon: '<i class="material-icons">play_arrow</i>',
    id: 0
  },
  methods: {
    addTimer: function addTimer(title) {
      var objTimer = {
        'title': title || 'timer',
        'count': 0,
        'screenTime': "0 : 00 : 00",
        'stopTime': true,
        'name': 'play_arrow',
        'intervalId': ''
      };
      this.arrTimers.push(objTimer);
      this.inputTitle = '';
    },
    start: function start(timer) {
      timer.stopTime = !timer.stopTime;
      if (timer.stopTime) {
        clearInterval(timer.intervalId);
      } else {
        timer.intervalId = setInterval(function () {
          timer.count++;
          var sec = timer.count % 60;
          if (sec < 10) {
            sec = '0' + sec;
          }
          var min = Math.floor(timer.count / 60);
          if (min < 10) {
            min = '0' + min;
          }
          var hour = Math.floor(timer.count / 3600);
          timer.screenTime = hour + " : " + min + " : " + sec;
        }, 1000);
      }
    },
    del: function del(index) {
      clearInterval(timer.intervalId);
      this.arrTimers.splice(index, 1);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfNTE5MzVlM2YuanMiXSwibmFtZXMiOlsidGltZXIiLCJWdWUiLCJlbCIsImRhdGEiLCJpbnB1dFRpdGxlIiwiYXJyVGltZXJzIiwic3RhcnRJY29uIiwic3RvcEljb24iLCJpZCIsIm1ldGhvZHMiLCJhZGRUaW1lciIsInRpdGxlIiwib2JqVGltZXIiLCJwdXNoIiwic3RhcnQiLCJzdG9wVGltZSIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJjb3VudCIsInNlYyIsIm1pbiIsIk1hdGgiLCJmbG9vciIsImhvdXIiLCJzY3JlZW5UaW1lIiwiZGVsIiwiaW5kZXgiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsUUFBUSxJQUFJQyxHQUFKLENBQVE7QUFDbEJDLE1BQUksU0FEYztBQUVsQkMsUUFBTTtBQUNKQyxnQkFBWSxFQURSO0FBRUpDLGVBQVcsRUFGUDtBQUdKQyxlQUFXLDBDQUhQO0FBSUpDLGNBQVUsMENBSk47QUFLSkMsUUFBSTtBQUxBLEdBRlk7QUFTbEJDLFdBQVM7QUFDUEMsWUFETyxvQkFDRUMsS0FERixFQUNTO0FBQ2QsVUFBSUMsV0FBVztBQUNiLGlCQUFTRCxTQUFTLE9BREw7QUFFYixpQkFBUyxDQUZJO0FBR2IsbUNBSGE7QUFJYixvQkFBWSxJQUpDO0FBS2IsZ0JBQVEsWUFMSztBQU1iLHNCQUFjO0FBTkQsT0FBZjtBQVFBLFdBQUtOLFNBQUwsQ0FBZVEsSUFBZixDQUFvQkQsUUFBcEI7QUFDQSxXQUFLUixVQUFMLEdBQWtCLEVBQWxCO0FBQ0QsS0FaTTtBQWFQVSxTQWJPLGlCQWFEZCxLQWJDLEVBYU07QUFDWEEsWUFBTWUsUUFBTixHQUFpQixDQUFDZixNQUFNZSxRQUF4QjtBQUNBLFVBQUdmLE1BQU1lLFFBQVQsRUFBbUI7QUFDakJDLHNCQUFjaEIsTUFBTWlCLFVBQXBCO0FBQ0QsT0FGRCxNQUdLO0FBQ0hqQixjQUFNaUIsVUFBTixHQUFtQkMsWUFBWSxZQUFNO0FBQ25DbEIsZ0JBQU1tQixLQUFOO0FBQ0EsY0FBSUMsTUFBTXBCLE1BQU1tQixLQUFOLEdBQWMsRUFBeEI7QUFDQSxjQUFHQyxNQUFNLEVBQVQsRUFBYTtBQUNYQSxrQkFBTSxNQUFNQSxHQUFaO0FBQ0Q7QUFDRCxjQUFJQyxNQUFNQyxLQUFLQyxLQUFMLENBQVd2QixNQUFNbUIsS0FBTixHQUFjLEVBQXpCLENBQVY7QUFDQSxjQUFHRSxNQUFNLEVBQVQsRUFBYTtBQUNYQSxrQkFBTSxNQUFNQSxHQUFaO0FBQ0Q7QUFDRCxjQUFJRyxPQUFPRixLQUFLQyxLQUFMLENBQVd2QixNQUFNbUIsS0FBTixHQUFjLElBQXpCLENBQVg7QUFDQW5CLGdCQUFNeUIsVUFBTixHQUFzQkQsSUFBdEIsV0FBZ0NILEdBQWhDLFdBQXlDRCxHQUF6QztBQUNELFNBWmtCLEVBWWhCLElBWmdCLENBQW5CO0FBYUQ7QUFDRixLQWpDTTtBQWtDUE0sT0FsQ08sZUFrQ0hDLEtBbENHLEVBa0NJO0FBQ1RYLG9CQUFjaEIsTUFBTWlCLFVBQXBCO0FBQ0EsV0FBS1osU0FBTCxDQUFldUIsTUFBZixDQUFzQkQsS0FBdEIsRUFBNkIsQ0FBN0I7QUFDRDtBQXJDTTtBQVRTLENBQVIsQ0FBWiIsImZpbGUiOiJmYWtlXzUxOTM1ZTNmLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHRpbWVyID0gbmV3IFZ1ZSh7XG4gIGVsOiBcIiN0aW1lcnNcIixcbiAgZGF0YToge1xuICAgIGlucHV0VGl0bGU6IFwiXCIsXG4gICAgYXJyVGltZXJzOiBbXSxcbiAgICBzdGFydEljb246ICc8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+cGxheV9hcnJvdzwvaT4nLFxuICAgIHN0b3BJY29uOiAnPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPnBsYXlfYXJyb3c8L2k+JyxcbiAgICBpZDogMCxcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFkZFRpbWVyKHRpdGxlKSB7XG4gICAgICBsZXQgb2JqVGltZXIgPSB7XG4gICAgICAgICd0aXRsZSc6IHRpdGxlIHx8ICd0aW1lcicsXG4gICAgICAgICdjb3VudCc6IDAsXG4gICAgICAgICdzY3JlZW5UaW1lJzogYDAgOiAwMCA6IDAwYCxcbiAgICAgICAgJ3N0b3BUaW1lJzogdHJ1ZSxcbiAgICAgICAgJ25hbWUnOiAncGxheV9hcnJvdycsXG4gICAgICAgICdpbnRlcnZhbElkJzogJycsXG4gICAgICB9XG4gICAgICB0aGlzLmFyclRpbWVycy5wdXNoKG9ialRpbWVyKTtcbiAgICAgIHRoaXMuaW5wdXRUaXRsZSA9ICcnO1xuICAgIH0sXG4gICAgc3RhcnQodGltZXIpIHtcbiAgICAgIHRpbWVyLnN0b3BUaW1lID0gIXRpbWVyLnN0b3BUaW1lO1xuICAgICAgaWYodGltZXIuc3RvcFRpbWUpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lci5pbnRlcnZhbElkKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aW1lci5pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIHRpbWVyLmNvdW50Kys7XG4gICAgICAgICAgbGV0IHNlYyA9IHRpbWVyLmNvdW50ICUgNjA7XG4gICAgICAgICAgaWYoc2VjIDwgMTApIHtcbiAgICAgICAgICAgIHNlYyA9ICcwJyArIHNlYztcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IG1pbiA9IE1hdGguZmxvb3IodGltZXIuY291bnQgLyA2MCk7XG4gICAgICAgICAgaWYobWluIDwgMTApIHtcbiAgICAgICAgICAgIG1pbiA9ICcwJyArIG1pbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGhvdXIgPSBNYXRoLmZsb29yKHRpbWVyLmNvdW50IC8gMzYwMCk7XG4gICAgICAgICAgdGltZXIuc2NyZWVuVGltZSA9IGAke2hvdXJ9IDogJHttaW59IDogJHtzZWN9YDtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZWwoaW5kZXgpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIuaW50ZXJ2YWxJZCk7XG4gICAgICB0aGlzLmFyclRpbWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxufSlcbiJdfQ==
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
