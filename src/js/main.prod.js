(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var timer = new Vue({
  el: "#timers",
  data: {
    inputTitle: "",
    arrTimers: [],
    startIcon: '<i class="material-icons">play_arrow</i>',
    stopIcon: '<i class="material-icons">play_arrow</i>',
    id: 0
  },
  methods: {
    addTimer: function addTimer(title) {
      var objTimer = {
        'title': title,
        'count': 0,
        'screenTime': "0 : 00 : 00",
        'stopTime': true,
        'name': 'play_arrow',
        'intervalId': ''
      };
      this.arrTimers.push(objTimer);
      this.inputTitle = '';
    },
    start: function start(timer) {
      timer.stopTime = !timer.stopTime;
      if (timer.stopTime) {
        clearInterval(timer.intervalId);
      } else {
        timer.intervalId = setInterval(function () {
          timer.count++;
          var sec = timer.count % 60;
          if (sec < 10) {
            sec = '0' + sec;
          }
          var min = Math.floor(timer.count / 60);
          if (min < 10) {
            min = '0' + min;
          }
          var hour = Math.floor(timer.count / 3600);
          timer.screenTime = hour + " : " + min + " : " + sec;
        }, 1000);
      }
    },
    del: function del(index) {
      clearInterval(timer.intervalId);
      this.arrTimers.splice(index, 1);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfMWU0NzYzMjYuanMiXSwibmFtZXMiOlsidGltZXIiLCJWdWUiLCJlbCIsImRhdGEiLCJpbnB1dFRpdGxlIiwiYXJyVGltZXJzIiwic3RhcnRJY29uIiwic3RvcEljb24iLCJpZCIsIm1ldGhvZHMiLCJhZGRUaW1lciIsInRpdGxlIiwib2JqVGltZXIiLCJwdXNoIiwic3RhcnQiLCJzdG9wVGltZSIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJjb3VudCIsInNlYyIsIm1pbiIsIk1hdGgiLCJmbG9vciIsImhvdXIiLCJzY3JlZW5UaW1lIiwiZGVsIiwiaW5kZXgiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsUUFBUSxJQUFJQyxHQUFKLENBQVE7QUFDbEJDLE1BQUksU0FEYztBQUVsQkMsUUFBTTtBQUNKQyxnQkFBWSxFQURSO0FBRUpDLGVBQVcsRUFGUDtBQUdKQyxlQUFXLDBDQUhQO0FBSUpDLGNBQVUsMENBSk47QUFLSkMsUUFBSTtBQUxBLEdBRlk7QUFTbEJDLFdBQVM7QUFDUEMsWUFETyxvQkFDRUMsS0FERixFQUNTO0FBQ2QsVUFBSUMsV0FBVztBQUNiLGlCQUFTRCxLQURJO0FBRWIsaUJBQVMsQ0FGSTtBQUdiLG1DQUhhO0FBSWIsb0JBQVksSUFKQztBQUtiLGdCQUFRLFlBTEs7QUFNYixzQkFBYztBQU5ELE9BQWY7QUFRQSxXQUFLTixTQUFMLENBQWVRLElBQWYsQ0FBb0JELFFBQXBCO0FBQ0EsV0FBS1IsVUFBTCxHQUFrQixFQUFsQjtBQUNELEtBWk07QUFhUFUsU0FiTyxpQkFhRGQsS0FiQyxFQWFNO0FBQ1hBLFlBQU1lLFFBQU4sR0FBaUIsQ0FBQ2YsTUFBTWUsUUFBeEI7QUFDQSxVQUFHZixNQUFNZSxRQUFULEVBQW1CO0FBQ2pCQyxzQkFBY2hCLE1BQU1pQixVQUFwQjtBQUNELE9BRkQsTUFHSztBQUNIakIsY0FBTWlCLFVBQU4sR0FBbUJDLFlBQVksWUFBTTtBQUNuQ2xCLGdCQUFNbUIsS0FBTjtBQUNBLGNBQUlDLE1BQU1wQixNQUFNbUIsS0FBTixHQUFjLEVBQXhCO0FBQ0EsY0FBR0MsTUFBTSxFQUFULEVBQWE7QUFDWEEsa0JBQU0sTUFBTUEsR0FBWjtBQUNEO0FBQ0QsY0FBSUMsTUFBTUMsS0FBS0MsS0FBTCxDQUFXdkIsTUFBTW1CLEtBQU4sR0FBYyxFQUF6QixDQUFWO0FBQ0EsY0FBR0UsTUFBTSxFQUFULEVBQWE7QUFDWEEsa0JBQU0sTUFBTUEsR0FBWjtBQUNEO0FBQ0QsY0FBSUcsT0FBT0YsS0FBS0MsS0FBTCxDQUFXdkIsTUFBTW1CLEtBQU4sR0FBYyxJQUF6QixDQUFYO0FBQ0FuQixnQkFBTXlCLFVBQU4sR0FBc0JELElBQXRCLFdBQWdDSCxHQUFoQyxXQUF5Q0QsR0FBekM7QUFDRCxTQVprQixFQVloQixJQVpnQixDQUFuQjtBQWFEO0FBQ0YsS0FqQ007QUFrQ1BNLE9BbENPLGVBa0NIQyxLQWxDRyxFQWtDSTtBQUNUWCxvQkFBY2hCLE1BQU1pQixVQUFwQjtBQUNBLFdBQUtaLFNBQUwsQ0FBZXVCLE1BQWYsQ0FBc0JELEtBQXRCLEVBQTZCLENBQTdCO0FBQ0Q7QUFyQ007QUFUUyxDQUFSLENBQVoiLCJmaWxlIjoiZmFrZV8xZTQ3NjMyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCB0aW1lciA9IG5ldyBWdWUoe1xuICBlbDogXCIjdGltZXJzXCIsXG4gIGRhdGE6IHtcbiAgICBpbnB1dFRpdGxlOiBcIlwiLFxuICAgIGFyclRpbWVyczogW10sXG4gICAgc3RhcnRJY29uOiAnPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPnBsYXlfYXJyb3c8L2k+JyxcbiAgICBzdG9wSWNvbjogJzxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5wbGF5X2Fycm93PC9pPicsXG4gICAgaWQ6IDAsXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBhZGRUaW1lcih0aXRsZSkge1xuICAgICAgbGV0IG9ialRpbWVyID0ge1xuICAgICAgICAndGl0bGUnOiB0aXRsZSxcbiAgICAgICAgJ2NvdW50JzogMCxcbiAgICAgICAgJ3NjcmVlblRpbWUnOiBgMCA6IDAwIDogMDBgLFxuICAgICAgICAnc3RvcFRpbWUnOiB0cnVlLFxuICAgICAgICAnbmFtZSc6ICdwbGF5X2Fycm93JyxcbiAgICAgICAgJ2ludGVydmFsSWQnOiAnJyxcbiAgICAgIH1cbiAgICAgIHRoaXMuYXJyVGltZXJzLnB1c2gob2JqVGltZXIpO1xuICAgICAgdGhpcy5pbnB1dFRpdGxlID0gJyc7XG4gICAgfSxcbiAgICBzdGFydCh0aW1lcikge1xuICAgICAgdGltZXIuc3RvcFRpbWUgPSAhdGltZXIuc3RvcFRpbWU7XG4gICAgICBpZih0aW1lci5zdG9wVGltZSkge1xuICAgICAgICBjbGVhckludGVydmFsKHRpbWVyLmludGVydmFsSWQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRpbWVyLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgdGltZXIuY291bnQrKztcbiAgICAgICAgICBsZXQgc2VjID0gdGltZXIuY291bnQgJSA2MDtcbiAgICAgICAgICBpZihzZWMgPCAxMCkge1xuICAgICAgICAgICAgc2VjID0gJzAnICsgc2VjO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgbWluID0gTWF0aC5mbG9vcih0aW1lci5jb3VudCAvIDYwKTtcbiAgICAgICAgICBpZihtaW4gPCAxMCkge1xuICAgICAgICAgICAgbWluID0gJzAnICsgbWluO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgaG91ciA9IE1hdGguZmxvb3IodGltZXIuY291bnQgLyAzNjAwKTtcbiAgICAgICAgICB0aW1lci5zY3JlZW5UaW1lID0gYCR7aG91cn0gOiAke21pbn0gOiAke3NlY31gO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlbChpbmRleCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lci5pbnRlcnZhbElkKTtcbiAgICAgIHRoaXMuYXJyVGltZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG59KVxuIl19
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
